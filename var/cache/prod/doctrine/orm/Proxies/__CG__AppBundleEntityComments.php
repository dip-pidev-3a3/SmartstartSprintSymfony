<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Comments extends \AppBundle\Entity\Comments implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentId', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentDate', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentContent', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentApproved', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentAuthor', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentPost', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentPostId'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentId', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentDate', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentContent', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentApproved', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentAuthor', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentPost', '' . "\0" . 'AppBundle\\Entity\\Comments' . "\0" . 'commentPostId'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Comments $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getCommentId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getCommentId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentId', []);

        return parent::getCommentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentId($commentId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentId', [$commentId]);

        return parent::setCommentId($commentId);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentDate', []);

        return parent::getCommentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentDate($commentDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentDate', [$commentDate]);

        return parent::setCommentDate($commentDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentContent', []);

        return parent::getCommentContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentContent($commentContent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentContent', [$commentContent]);

        return parent::setCommentContent($commentContent);
    }

    /**
     * {@inheritDoc}
     */
    public function isCommentApproved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCommentApproved', []);

        return parent::isCommentApproved();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentApproved($commentApproved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentApproved', [$commentApproved]);

        return parent::setCommentApproved($commentApproved);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentAuthor', []);

        return parent::getCommentAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentAuthor($commentAuthor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentAuthor', [$commentAuthor]);

        return parent::setCommentAuthor($commentAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentPost', []);

        return parent::getCommentPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentPost($commentPost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentPost', [$commentPost]);

        return parent::setCommentPost($commentPost);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentApproved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentApproved', []);

        return parent::getCommentApproved();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentPostId(\AppBundle\Entity\Blogposts $commentPostId = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentPostId', [$commentPostId]);

        return parent::setCommentPostId($commentPostId);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentPostId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentPostId', []);

        return parent::getCommentPostId();
    }

}
